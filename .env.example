# =============================================================================
# NYC RENT-STABILIZED APARTMENT FINDER - Environment Configuration
# =============================================================================
# This system finds undervalued rent-stabilized apartments using DHCR data
# and advanced market analysis. Sales & rentals scrapers are DISABLED.

# =============================================================================
# SUPABASE CONFIGURATION (REQUIRED)
# =============================================================================
# Get these from your Supabase project dashboard: https://app.supabase.com
SUPABASE_URL=https://rskcssgjpbshagjocdre.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJza2Nzc2dqcGJzaGFnam9jZHJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5MzU3ODUsImV4cCI6MjA2NTUxMTc4NX0.dgRp-eXWdIPXsL5R_lCCNfbhjOwM8KpYXixC4sHBf30

# =============================================================================
# RENT-STABILIZED SCRAPER CONFIGURATION
# =============================================================================
# Main system mode - set to true for first run to get all neighborhoods
INITIAL_BULK_LOAD=false

# Testing override - set to specific neighborhood to test only that area
# IMPORTANT: Use exact StreetEasy neighborhood slug format (lowercase with hyphens)
# ✅ CORRECT Examples: soho, east-village, lower-east-side, west-village
# ❌ WRONG Examples: SoHo, East Village, Lower East Side
# Leave blank or comment out for normal DHCR-based neighborhood detection
TEST_NEIGHBORHOOD=soho

# Rent-stabilized detection confidence threshold (70-100)
# Higher = more strict, fewer false positives
RENT_STABILIZED_CONFIDENCE_THRESHOLD=70

# Undervaluation threshold - percentage below market to consider undervalued
# 15 = 15%+ below market rent (recommended for NYC)
UNDERVALUATION_THRESHOLD=15

# Maximum listings to analyze per neighborhood (to control API usage)
MAX_LISTINGS_PER_NEIGHBORHOOD=100

# =============================================================================
# EXTERNAL API CONFIGURATION (OPTIONAL)
# =============================================================================
# StreetEasy scraping API key - only needed if using external scraping service
# The system can work with your existing StreetEasy scraper integration
RAPIDAPI_KEY=813cdd85femsh5be25927dee1340p118e7ajsncc2a02b3323f

# =============================================================================
# DHCR DATA CONFIGURATION
# =============================================================================
# DHCR PDF file URLs (system can auto-download if files not local)
DHCR_MANHATTAN_URL=https://rentguidelinesboard.cityofnewyork.us/wp-content/uploads/2024/11/2023-DHCR-Bldg-File-Manhattan.pdf
DHCR_BROOKLYN_URL=https://rentguidelinesboard.cityofnewyork.us/wp-content/uploads/2024/11/2023-DHCR-Bldg-File-Brooklyn.pdf
DHCR_BRONX_URL=https://rentguidelinesboard.cityofnewyork.us/wp-content/uploads/2024/11/2023-DHCR-Bldg-File-Bronx.pdf
DHCR_QUEENS_URL=https://rentguidelinesboard.cityofnewyork.us/wp-content/uploads/2024/11/2023-DHCR-Bldg-File-Queens.pdf

# =============================================================================
# NOTIFICATION CONFIGURATION (OPTIONAL)
# =============================================================================
# Webhook for rent-stabilized apartment alerts
# Can be Slack webhook, Discord webhook, or any HTTP endpoint
WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# =============================================================================
# ADVANCED VALUATION SETTINGS (OPTIONAL)
# =============================================================================
# Minimum sample size for exact bed/bath/amenity matching
MIN_EXACT_MATCHES=3

# Minimum sample size for bed/bath specific pricing
MIN_BED_BATH_MATCHES=8

# Minimum sample size for bedroom-specific with adjustments
MIN_BED_MATCHES=12

# Minimum sample size for price per sqft fallback method
MIN_SQFT_MATCHES=20

# =============================================================================
# RAILWAY DEPLOYMENT SETTINGS
# =============================================================================
# Minimum confidence score to save listings to database
MIN_CONFIDENCE_TO_SAVE=60

# Rate limiting for API calls (milliseconds between requests)
API_RATE_LIMIT_DELAY=2000

# =============================================================================
# NEIGHBORHOOD TARGETING (ADVANCED)
# =============================================================================
# Override DHCR-based neighborhood detection with manual list
# Comma-separated list of StreetEasy neighborhood slugs (lowercase with hyphens)
# IMPORTANT: Use railway sequencer format: soho, east-village, lower-east-side
# Leave blank to use automatic DHCR-based detection (recommended)
MANUAL_NEIGHBORHOODS=

# Maximum number of neighborhoods to target in regular mode
MAX_NEIGHBORHOODS_REGULAR=15

# Focus on specific borough (manhattan, brooklyn, queens, bronx)
# Leave blank to include all boroughs with DHCR data
FOCUS_BOROUGH=

# =============================================================================
# LOGGING AND DEBUGGING
# =============================================================================
# Logging level (error, warn, info, debug)
LOG_LEVEL=info

# Enable detailed DHCR parsing logs
DEBUG_DHCR_PARSING=false

# Enable detailed valuation method logs  
DEBUG_VALUATION_METHODS=false

# Enable API call tracking
TRACK_API_USAGE=true

# =============================================================================
# QUICK START GUIDE FOR TESTING SOHO
# =============================================================================
# To test SOHO specifically:
# 1. Set: TEST_NEIGHBORHOOD=soho
# 2. Set: INITIAL_BULK_LOAD=false  
# 3. Run: npm start
#
# Other test examples:
# TEST_NEIGHBORHOOD=east-village
# TEST_NEIGHBORHOOD=lower-east-side  
# TEST_NEIGHBORHOOD=west-village
# TEST_NEIGHBORHOOD=tribeca
# TEST_NEIGHBORHOOD=chelsea
# TEST_NEIGHBORHOOD=williamsburg
# TEST_NEIGHBORHOOD=park-slope
# TEST_NEIGHBORHOOD=astoria

# =============================================================================
# RAILWAY HIGH-PRIORITY NEIGHBORHOODS (REFERENCE)
# =============================================================================
# The railway sequencer targets these neighborhoods by priority:
#
# Manhattan (Top Priority):
# east-village, lower-east-side, chinatown, financial-district,
# west-village, greenwich-village, soho, nolita, tribeca,
# chelsea, gramercy, murray-hill, kips-bay, flatiron,
# upper-east-side, upper-west-side, hells-kitchen, midtown-east
#
# Brooklyn (Second Priority):  
# williamsburg, dumbo, brooklyn-heights, cobble-hill,
# carroll-gardens, park-slope, fort-greene, boerum-hill,
# red-hook, prospect-heights, crown-heights, bedford-stuyvesant,
# greenpoint, bushwick
#
# Queens (Third Priority):
# long-island-city, astoria, sunnyside, woodside,
# jackson-heights, elmhurst, forest-hills, ridgewood
#
# Bronx (Fourth Priority):
# mott-haven, concourse, fordham, university-heights,
# morrisania, melrose

# =============================================================================
# FULL SYSTEM FLOW
# =============================================================================
# The system will:
# 1. Parse DHCR PDFs to find rent-stabilized buildings
# 2. Target neighborhoods with highest building density (or your TEST_NEIGHBORHOOD)
# 3. Use smart caching to avoid duplicate API calls
# 4. Find listings that are rent-stabilized (70%+ confidence)
# 5. Analyze if they're undervalued (15%+ below market)
# 6. Save results to Supabase undervalued_rent_stabilized table
# 7. Automatically clean up stale listings
#
# Focus: ONLY rent-stabilized apartments (sales/rentals disabled)
